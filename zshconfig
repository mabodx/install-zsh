# ===========================git==============================

alias py='python3'

alias tmuxk="tmux kill-window -t"
alias tmuxa="tmux attach -t"

# ===========================git==============================
alias grmb='git branch --merged | grep -v "\*" | grep -v "master"'
alias grmbf='git branch --merged | grep -v "\*" | grep -v "master" | xargs -n 1 git branch -d'
alias gf='git fetch'
alias gcmtb='git checkout -t origin/master -b '
alias grc='git rebase --continue'
alias g='git'
# Aliases for local development workflow
alias gs='git status'                    # See a summary of which changes are staged for a commit (the top green section),
                                         #   which are modified on disk but not staged for a commit (the middle red
                                         #   section, "Changes not staged for commit"), and which are not yet tracked by
                                         #   the repo and need to be `git add`-ed (the bottom red section, "Untracked
                                         #   files").
alias ga='git add'                       # Add a file to the "stage" of changes that will be committed if you run `git
                                         #   commit` (i.e. move the file from the middle/bottom red sections to the top
                                         #   green section).
alias gap='git add -p'                   # Add a file to the "stage," but instead of adding the whole file at once, git
                                         #   will detect sections of changes, and for each section, will ask you if you
                                         #   want to add it or not.  Useful for when you've changed the same file for two
                                         #   different logical tasks, but only want to commit the changes related to one
                                         #   task.
alias gd='git diff'                      # Show the diff between the last commit and the new changes that you have not yet
                                         #   `git add`-ed.  i.e. You know the middle red section of `git status` output?
                                         #   `git diff` shows those changes.
alias gdc='git diff --cached'            # Show the diff of what would be committed if you were to run `git commit` right
                                         #   now.  i.e. You know the top green section of `git status` output?  `git diff
                                         #   --cached` shows those changes.
alias gc='git commit'
alias gcm='git commit -m'                # Commit with a message, e.g. `git commit -m "Implemented a new feature."`.  The
                                         #   most common command you'll use when committing.
alias gcam='git commit -am'              # The `-a` flag automatically stages all changes (i.e. the middle red section of
                                         #   `git status` automatically gets treated as if they were in the top green
                                         #   section).  Useful for when you quickly want to commit all the changes you've
                                         #   made without having to `git add` every single file.  Also useful for when
                                         #   you've deleted a file and want to commit that deletion.
alias gca='git commit --amend'           # Revise the last commit.  Useful if you made a typo in the commit message.  If
                                         #   you made some extra changes that should logically get lumped into the last
                                         #   commit, you can `git add -p` those changes and then run `git commit --amend`
                                         #   to lump them into the last commit.
alias gcaa='git commit -a --amend'       # Revise the last commit by automatically lumping all your new changes in.
                                         #   (Literally combines the effects of `-a` and `--amend`.
alias gcp='git cherry-pick'
# Aliases for undoing history
alias gr='git reset'
alias grh='git reset HEAD'
alias grh1='git reset HEAD~1'            # Pretend like the last commit didn't happen.  This will still keep the changes
                                         #   of the last commit on disk, they will just no longer have been committed; you
                                         #   will now see them in the list of unstaged changes (i.e. the middle red section
                                         #   of `git status`).  If you actually want to completely erase the last commit,
                                         #   do `git reset --hard HEAD~1`.
# Aliases for branch manipulation
alias gb='git branch'                    # List your local branches.
alias gbm='git branch --merged'          # List local branches that have already been merged into the current branch
                                         #   (and are therefore safe to delete).
alias gbd='git branch -d'                # Delete a branch, e.g. `git branch -d branch-to-delete`.
alias gco='git checkout'                 # Checkout a branch, e.g. `git checkout other-branch`.  This will replace the
                                         #   current files on disk with the files as they exist on that branch.
alias gcom='git checkout master'         # Checkout the master branch.
alias gcob='git checkout -b'             # Create a new branch and switch to it immediately, e.g. `git checkout -b
                                         #   new-branch`.  The new branch will "fork" off whatever the current commit is
                                         #   at the time you run `git checkout -b`.
alias gdp='git diff HEAD^ HEAD'
alias gl='git log'
alias gpl='git pull'
alias gm='git mergetool'
alias sc='npm run --silent sanity-check'
alias cynmake=' cmake -DCMAKE_BUILD_TYPE=Release -DCMAKE_EXPORT_COMPILE_COMMANDS=ON -B build && cmake --build build -j 8'
alias cydmake="/usr/bin/cmake -S/project -B/project/build -DBACKTESTING=ON  -DENABLE_HFTBACKEND_BINANCE=ON -DENABLE_STRATEGY_ALL=OFF -B build && cmake --build build -j 8"
